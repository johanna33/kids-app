{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,W,iB,C,A,C,E,E,Q,A,E,Q,S,C,C,C,E,E,E,O,C,a,I,G,E,E,O,C,U,I,G,I,E,E,S,E,E,S,E,E,S,E,E,SCMA,IAAM,EAID,EAAE,CAKA,SAAS,KACd,AAgBF,WACE,IAAM,EAAqB,AAAA,CAAA,EAAA,EAAA,YAAW,AAAX,EAAa,uBAExC,GAAI,CAAC,EACH,OAIF,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,cAAc,CAAC,GAGxB,IAAM,EAAW,SAAS,sBAAsB,GAGhD,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,OAAO,CAAC,AAAC,IACrB,IAAM,EAAe,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,aAAa,CAAC,MAAO,CACjD,UAAW,gBACX,WAAY,CACV,MAAO,EAAK,IAAI,CAChB,aAAc,CAAA,EAAG,EAAK,IAAI,CAAC,EAAE,EAAE,EAAK,WAAW,CAAA,CAAE,CACjD,SAAU,GACZ,CACF,GAEM,EAAkB,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,aAAa,CAAC,MAAO,CACpD,UAAW,kBACb,GAGM,EAAkB,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,aAAa,CAAC,MAAO,CACpD,UAAW,oBACb,EAGI,CAAA,EAAK,iBAAiB,EACxB,OAAO,OAAO,CAAC,EAAK,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,EAAK,EAAM,IACzD,EAAgB,KAAa,CAAC,EAAI,CAAG,CACxC,GAIF,IAAM,EAAiB,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,aAAa,CAAC,MAAO,CACnD,UAAW,iBACb,EAGI,CAAA,EAAK,cAAc,EACrB,OAAO,OAAO,CAAC,EAAK,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,EAAK,EAAM,IACtD,EAAe,KAAa,CAAC,EAAI,CAAG,CACvC,GAIF,EAAgB,WAAW,CAAC,GAC5B,EAAgB,WAAW,CAAC,GAE5B,IAAM,EAAe,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,aAAa,CAAC,MAAO,CACjD,UAAW,gBACX,KAAM,EAAK,IAAI,AACjB,GAEA,EAAa,WAAW,CAAC,GACzB,EAAa,WAAW,CAAC,GAGzB,IAAM,EAAgB,KACpB,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,EAAU,CAAA,EAAG,EAAK,IAAI,CAAC,EAAE,EAAE,EAAK,WAAW,CAAA,CAAE,EAC7C,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,WAAW,IAAM,EAAa,SAAS,CAAC,MAAM,CAAC,UAAW,IAC5D,EAEA,EAAa,gBAAgB,CAAC,QAAS,GACvC,EAAe,IAAI,CAAC,CAClB,QAAS,EACT,KAAM,QACN,SAAU,CACZ,GAGA,IAAM,EAAkB,AAAC,IAEnB,CAAA,AAAiB,UAAjB,AADa,EACJ,GAAG,EAAgB,AAAiB,MAAjB,AADf,EACwB,GAAG,AAAK,IAC/C,EAAE,cAAc,GAChB,IAEJ,EAEA,EAAa,gBAAgB,CAAC,UAAW,GACzC,EAAe,IAAI,CAAC,CAClB,QAAS,EACT,KAAM,UACN,SAAU,CACZ,GAEA,EAAS,WAAW,CAAC,EACvB,GAEA,EAAmB,WAAW,CAAC,GAE/B,QAAQ,GAAG,CAAC,WAAY,AAAA,EAAA,aAAY,CAAE,MAAM,CAAE,iBAChD,GAnHA,CAKO,SAAS,IACd,EAAe,OAAO,CAAC,CAAC,CAAA,QAAE,CAAO,CAAA,KAAE,CAAI,CAAA,SAAE,CAAQ,CAAE,IACjD,EAAQ,mBAAmB,CAAC,EAAM,EACpC,GACA,EAAe,MAAM,CAAG,CAC1B,C","sources":["<anon>","src/scripts/sections/positions.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"gMsGi\", function(module, exports) {\n\n$parcel$export(module.exports, \"initialize\", () => $1eb37ff04f1042e9$export$2a47f398eeff8b01);\n$parcel$export(module.exports, \"cleanup\", () => $1eb37ff04f1042e9$export$de863c629cb9919d);\n\nvar $ioPRj = parcelRequire(\"ioPRj\");\n\nvar $hSXbD = parcelRequire(\"hSXbD\");\n\nvar $4yiPC = parcelRequire(\"4yiPC\");\n\nvar $bsJMP = parcelRequire(\"bsJMP\");\n// Track event listeners for cleanup\nconst $1eb37ff04f1042e9$var$eventListeners = [];\nfunction $1eb37ff04f1042e9$export$2a47f398eeff8b01() {\n    $1eb37ff04f1042e9$var$renderPositionsSection();\n}\nfunction $1eb37ff04f1042e9$export$de863c629cb9919d() {\n    $1eb37ff04f1042e9$var$eventListeners.forEach(({ element: element, type: type, listener: listener })=>{\n        element.removeEventListener(type, listener);\n    });\n    $1eb37ff04f1042e9$var$eventListeners.length = 0;\n}\n/**\n * Render the positions section\n */ function $1eb37ff04f1042e9$var$renderPositionsSection() {\n    const positionsContainer = (0, $hSXbD.getContainer)(\"positions-container\");\n    if (!positionsContainer) return;\n    // Clear the container efficiently\n    (0, $bsJMP.DOMUtils).clearContainer(positionsContainer);\n    // Use document fragment for better performance\n    const fragment = document.createDocumentFragment();\n    // Create position cards\n    (0, $ioPRj.positionsData).forEach((item)=>{\n        const positionCard = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"position-card\",\n            attributes: {\n                title: item.name,\n                \"aria-label\": `${item.name}: ${item.description}`,\n                tabindex: \"0\"\n            }\n        });\n        const positionDisplay = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"position-display\"\n        });\n        // Create reference object (like a box)\n        const referenceObject = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"position-reference\"\n        });\n        // Apply reference position styles\n        if (item.referencePosition) Object.entries(item.referencePosition).forEach(([key, value])=>{\n            referenceObject.style[key] = value;\n        });\n        // Create position object (like a ball)\n        const positionObject = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"position-object\"\n        });\n        // Apply object position styles\n        if (item.objectPosition) Object.entries(item.objectPosition).forEach(([key, value])=>{\n            positionObject.style[key] = value;\n        });\n        // Add objects to display\n        positionDisplay.appendChild(referenceObject);\n        positionDisplay.appendChild(positionObject);\n        const positionName = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"position-name\",\n            text: item.name\n        });\n        positionCard.appendChild(positionDisplay);\n        positionCard.appendChild(positionName);\n        // Add event listener and track it for cleanup\n        const clickListener = ()=>{\n            (0, $4yiPC.speakText)(`${item.name}: ${item.description}`);\n            positionCard.classList.add(\"active\");\n            setTimeout(()=>positionCard.classList.remove(\"active\"), 1000);\n        };\n        positionCard.addEventListener(\"click\", clickListener);\n        $1eb37ff04f1042e9$var$eventListeners.push({\n            element: positionCard,\n            type: \"click\",\n            listener: clickListener\n        });\n        // Add keyboard support\n        const keydownListener = (e)=>{\n            const keyEvent = e;\n            if (keyEvent.key === \"Enter\" || keyEvent.key === \" \") {\n                e.preventDefault();\n                clickListener();\n            }\n        };\n        positionCard.addEventListener(\"keydown\", keydownListener);\n        $1eb37ff04f1042e9$var$eventListeners.push({\n            element: positionCard,\n            type: \"keydown\",\n            listener: keydownListener\n        });\n        fragment.appendChild(positionCard);\n    });\n    positionsContainer.appendChild(fragment);\n    console.log(\"Rendered\", (0, $ioPRj.positionsData).length, \"position cards\");\n}\n\n});\n\n\n//# sourceMappingURL=positions.577f4bd1.js.map\n","import { positionsData } from \"../common/data-content\";\nimport { getContainer } from \"../core/dom-elements\";\nimport { speakText } from \"../common/utils\";\nimport { DOMUtils } from \"../core/dom-utils\";\n\n// Track event listeners for cleanup\nconst eventListeners: Array<{\n  element: HTMLElement;\n  type: string;\n  listener: EventListener;\n}> = [];\n\n/**\n * Initialize the positions section\n */\nexport function initialize(): void {\n  renderPositionsSection();\n}\n\n/**\n * Clean up resources when section is hidden\n */\nexport function cleanup(): void {\n  eventListeners.forEach(({ element, type, listener }) => {\n    element.removeEventListener(type, listener);\n  });\n  eventListeners.length = 0;\n}\n\n/**\n * Render the positions section\n */\nfunction renderPositionsSection(): void {\n  const positionsContainer = getContainer(\"positions-container\");\n\n  if (!positionsContainer) {\n    return;\n  }\n\n  // Clear the container efficiently\n  DOMUtils.clearContainer(positionsContainer);\n\n  // Use document fragment for better performance\n  const fragment = document.createDocumentFragment();\n\n  // Create position cards\n  positionsData.forEach((item) => {\n    const positionCard = DOMUtils.createElement(\"div\", {\n      className: \"position-card\",\n      attributes: {\n        title: item.name,\n        \"aria-label\": `${item.name}: ${item.description}`,\n        tabindex: \"0\",\n      },\n    });\n\n    const positionDisplay = DOMUtils.createElement(\"div\", {\n      className: \"position-display\",\n    });\n\n    // Create reference object (like a box)\n    const referenceObject = DOMUtils.createElement(\"div\", {\n      className: \"position-reference\",\n    });\n\n    // Apply reference position styles\n    if (item.referencePosition) {\n      Object.entries(item.referencePosition).forEach(([key, value]) => {\n        (referenceObject.style as any)[key] = value as string;\n      });\n    }\n\n    // Create position object (like a ball)\n    const positionObject = DOMUtils.createElement(\"div\", {\n      className: \"position-object\",\n    });\n\n    // Apply object position styles\n    if (item.objectPosition) {\n      Object.entries(item.objectPosition).forEach(([key, value]) => {\n        (positionObject.style as any)[key] = value as string;\n      });\n    }\n\n    // Add objects to display\n    positionDisplay.appendChild(referenceObject);\n    positionDisplay.appendChild(positionObject);\n\n    const positionName = DOMUtils.createElement(\"div\", {\n      className: \"position-name\",\n      text: item.name,\n    });\n\n    positionCard.appendChild(positionDisplay);\n    positionCard.appendChild(positionName);\n\n    // Add event listener and track it for cleanup\n    const clickListener = () => {\n      speakText(`${item.name}: ${item.description}`);\n      positionCard.classList.add(\"active\");\n      setTimeout(() => positionCard.classList.remove(\"active\"), 1000);\n    };\n\n    positionCard.addEventListener(\"click\", clickListener);\n    eventListeners.push({\n      element: positionCard,\n      type: \"click\",\n      listener: clickListener,\n    });\n\n    // Add keyboard support\n    const keydownListener = (e: Event) => {\n      const keyEvent = e as KeyboardEvent;\n      if (keyEvent.key === \"Enter\" || keyEvent.key === \" \") {\n        e.preventDefault();\n        clickListener();\n      }\n    };\n\n    positionCard.addEventListener(\"keydown\", keydownListener);\n    eventListeners.push({\n      element: positionCard,\n      type: \"keydown\",\n      listener: keydownListener,\n    });\n\n    fragment.appendChild(positionCard);\n  });\n\n  positionsContainer.appendChild(fragment);\n\n  console.log(\"Rendered\", positionsData.length, \"position cards\");\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$1eb37ff04f1042e9$export$2a47f398eeff8b01","$1eb37ff04f1042e9$export$de863c629cb9919d","$ioPRj","$hSXbD","$4yiPC","$bsJMP","$1eb37ff04f1042e9$var$eventListeners","$1eb37ff04f1042e9$var$renderPositionsSection","positionsContainer","getContainer","DOMUtils","clearContainer","fragment","document","createDocumentFragment","positionsData","forEach","item","positionCard","createElement","className","attributes","title","name","description","tabindex","positionDisplay","referenceObject","referencePosition","entries","key","value","style","positionObject","objectPosition","appendChild","positionName","text","clickListener","speakText","classList","add","setTimeout","remove","addEventListener","push","element","type","listener","keydownListener","keyEvent","preventDefault","console","log","length","removeEventListener"],"version":3,"file":"positions.577f4bd1.js.map"}