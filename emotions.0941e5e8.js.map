{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,W,iB,C,A,C,E,E,Q,A,E,Q,S,C,C,C,E,E,E,O,C,a,I,G,E,E,O,C,U,I,G,I,E,E,S,E,E,S,E,E,S,E,E,SCMA,IAAM,EAID,EAAE,CAKA,SAAS,KACd,AAgBF,WACE,IAAM,EAAoB,AAAA,CAAA,EAAA,EAAA,YAAW,AAAX,EAAa,sBAEvC,GAAI,CAAC,EACH,OAIF,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,cAAc,CAAC,GAGxB,IAAM,EAAW,SAAS,sBAAsB,GAGhD,AAAA,CAAA,EAAA,EAAA,YAAW,AAAX,EAAa,OAAO,CAAC,AAAC,IACpB,IAAM,EAAc,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,aAAa,CAAC,MAAO,CAChD,UAAW,eACX,WAAY,CACV,MAAO,CAAA,EAAG,EAAK,IAAI,CAAC,EAAE,EAAE,EAAK,WAAW,CAAA,CAAE,CAC1C,aAAc,CAAA,EAAG,EAAK,IAAI,CAAC,EAAE,EAAE,EAAK,WAAW,CAAA,CAAE,CACjD,SAAU,GACZ,CACF,GAEM,EAAc,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,aAAa,CAAC,MAAO,CAChD,UAAW,eACX,KAAM,EAAK,KAAK,AAClB,GAEM,EAAc,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,aAAa,CAAC,MAAO,CAChD,UAAW,eACX,KAAM,EAAK,IAAI,AACjB,EACA,CAAA,EAAY,KAAK,CAAC,eAAe,CAAG,EAAK,KAAK,CAE9C,IAAM,EAAqB,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,aAAa,CAAC,MAAO,CACvD,UAAW,sBACX,KAAM,EAAK,WAAW,AACxB,GAEA,EAAY,WAAW,CAAC,GACxB,EAAY,WAAW,CAAC,GACxB,EAAY,WAAW,CAAC,GAGxB,IAAM,EAAgB,KACpB,AAAA,CAAA,EAAA,EAAA,SAAQ,AAAR,EAAU,CAAA,EAAG,EAAK,IAAI,CAAC,EAAE,EAAE,EAAK,WAAW,CAAA,CAAE,EAC7C,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,WAAW,IAAM,EAAY,SAAS,CAAC,MAAM,CAAC,UAAW,IAC3D,EAEA,EAAY,gBAAgB,CAAC,QAAS,GACtC,EAAe,IAAI,CAAC,CAClB,QAAS,EACT,KAAM,QACN,SAAU,CACZ,GAGA,IAAM,EAAkB,AAAC,IAEnB,CAAA,AAAiB,UAAjB,AADa,EACJ,GAAG,EAAgB,AAAiB,MAAjB,AADf,EACwB,GAAG,AAAK,IAC/C,EAAE,cAAc,GAChB,IAEJ,EAEA,EAAY,gBAAgB,CAAC,UAAW,GACxC,EAAe,IAAI,CAAC,CAClB,QAAS,EACT,KAAM,UACN,SAAU,CACZ,GAEA,EAAS,WAAW,CAAC,EACvB,GAEA,EAAkB,WAAW,CAAC,GAE9B,QAAQ,GAAG,CAAC,WAAY,AAAA,EAAA,YAAW,CAAE,MAAM,CAAE,gBAC/C,GA/FA,CAKO,SAAS,IACd,EAAe,OAAO,CAAC,CAAC,CAAA,QAAE,CAAO,CAAA,KAAE,CAAI,CAAA,SAAE,CAAQ,CAAE,IACjD,EAAQ,mBAAmB,CAAC,EAAM,EACpC,GACA,EAAe,MAAM,CAAG,CAC1B,C","sources":["<anon>","src/scripts/sections/emotions.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"dQH3V\", function(module, exports) {\n\n$parcel$export(module.exports, \"initialize\", () => $2700091020122021$export$2a47f398eeff8b01);\n$parcel$export(module.exports, \"cleanup\", () => $2700091020122021$export$de863c629cb9919d);\n\nvar $ioPRj = parcelRequire(\"ioPRj\");\n\nvar $hSXbD = parcelRequire(\"hSXbD\");\n\nvar $4yiPC = parcelRequire(\"4yiPC\");\n\nvar $bsJMP = parcelRequire(\"bsJMP\");\n// Track event listeners for cleanup\nconst $2700091020122021$var$eventListeners = [];\nfunction $2700091020122021$export$2a47f398eeff8b01() {\n    $2700091020122021$var$renderEmotionsSection();\n}\nfunction $2700091020122021$export$de863c629cb9919d() {\n    $2700091020122021$var$eventListeners.forEach(({ element: element, type: type, listener: listener })=>{\n        element.removeEventListener(type, listener);\n    });\n    $2700091020122021$var$eventListeners.length = 0;\n}\n/**\n * Render the emotions section\n */ function $2700091020122021$var$renderEmotionsSection() {\n    const emotionsContainer = (0, $hSXbD.getContainer)(\"emotions-container\");\n    if (!emotionsContainer) return;\n    // Clear the container efficiently\n    (0, $bsJMP.DOMUtils).clearContainer(emotionsContainer);\n    // Use document fragment for better performance\n    const fragment = document.createDocumentFragment();\n    // Create emotion cards\n    (0, $ioPRj.emotionsData).forEach((item)=>{\n        const emotionCard = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"emotion-card\",\n            attributes: {\n                title: `${item.name}: ${item.description}`,\n                \"aria-label\": `${item.name}: ${item.description}`,\n                tabindex: \"0\"\n            }\n        });\n        const emotionIcon = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"emotion-icon\",\n            text: item.emoji\n        });\n        const emotionName = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"emotion-name\",\n            text: item.name\n        });\n        emotionName.style.backgroundColor = item.color;\n        const emotionDescription = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"emotion-description\",\n            text: item.description\n        });\n        emotionCard.appendChild(emotionIcon);\n        emotionCard.appendChild(emotionName);\n        emotionCard.appendChild(emotionDescription);\n        // Add event listener and track it for cleanup\n        const clickListener = ()=>{\n            (0, $4yiPC.speakText)(`${item.name}: ${item.description}`);\n            emotionCard.classList.add(\"active\");\n            setTimeout(()=>emotionCard.classList.remove(\"active\"), 1000);\n        };\n        emotionCard.addEventListener(\"click\", clickListener);\n        $2700091020122021$var$eventListeners.push({\n            element: emotionCard,\n            type: \"click\",\n            listener: clickListener\n        });\n        // Add keyboard support\n        const keydownListener = (e)=>{\n            const keyEvent = e;\n            if (keyEvent.key === \"Enter\" || keyEvent.key === \" \") {\n                e.preventDefault();\n                clickListener();\n            }\n        };\n        emotionCard.addEventListener(\"keydown\", keydownListener);\n        $2700091020122021$var$eventListeners.push({\n            element: emotionCard,\n            type: \"keydown\",\n            listener: keydownListener\n        });\n        fragment.appendChild(emotionCard);\n    });\n    emotionsContainer.appendChild(fragment);\n    console.log(\"Rendered\", (0, $ioPRj.emotionsData).length, \"emotion cards\");\n}\n\n});\n\n\n//# sourceMappingURL=emotions.0941e5e8.js.map\n","import { emotionsData } from \"../common/data-content\";\nimport { getContainer } from \"../core/dom-elements\";\nimport { speakText } from \"../common/utils\";\nimport { DOMUtils } from \"../core/dom-utils\";\n\n// Track event listeners for cleanup\nconst eventListeners: Array<{\n  element: HTMLElement;\n  type: string;\n  listener: EventListener;\n}> = [];\n\n/**\n * Initialize the emotions section\n */\nexport function initialize(): void {\n  renderEmotionsSection();\n}\n\n/**\n * Clean up resources when section is hidden\n */\nexport function cleanup(): void {\n  eventListeners.forEach(({ element, type, listener }) => {\n    element.removeEventListener(type, listener);\n  });\n  eventListeners.length = 0;\n}\n\n/**\n * Render the emotions section\n */\nfunction renderEmotionsSection(): void {\n  const emotionsContainer = getContainer(\"emotions-container\");\n\n  if (!emotionsContainer) {\n    return;\n  }\n\n  // Clear the container efficiently\n  DOMUtils.clearContainer(emotionsContainer);\n\n  // Use document fragment for better performance\n  const fragment = document.createDocumentFragment();\n\n  // Create emotion cards\n  emotionsData.forEach((item) => {\n    const emotionCard = DOMUtils.createElement(\"div\", {\n      className: \"emotion-card\",\n      attributes: {\n        title: `${item.name}: ${item.description}`,\n        \"aria-label\": `${item.name}: ${item.description}`,\n        tabindex: \"0\",\n      },\n    });\n\n    const emotionIcon = DOMUtils.createElement(\"div\", {\n      className: \"emotion-icon\",\n      text: item.emoji,\n    });\n\n    const emotionName = DOMUtils.createElement(\"div\", {\n      className: \"emotion-name\",\n      text: item.name,\n    });\n    emotionName.style.backgroundColor = item.color;\n\n    const emotionDescription = DOMUtils.createElement(\"div\", {\n      className: \"emotion-description\",\n      text: item.description,\n    });\n\n    emotionCard.appendChild(emotionIcon);\n    emotionCard.appendChild(emotionName);\n    emotionCard.appendChild(emotionDescription);\n\n    // Add event listener and track it for cleanup\n    const clickListener = () => {\n      speakText(`${item.name}: ${item.description}`);\n      emotionCard.classList.add(\"active\");\n      setTimeout(() => emotionCard.classList.remove(\"active\"), 1000);\n    };\n\n    emotionCard.addEventListener(\"click\", clickListener);\n    eventListeners.push({\n      element: emotionCard,\n      type: \"click\",\n      listener: clickListener,\n    });\n\n    // Add keyboard support\n    const keydownListener = (e: Event) => {\n      const keyEvent = e as KeyboardEvent;\n      if (keyEvent.key === \"Enter\" || keyEvent.key === \" \") {\n        e.preventDefault();\n        clickListener();\n      }\n    };\n\n    emotionCard.addEventListener(\"keydown\", keydownListener);\n    eventListeners.push({\n      element: emotionCard,\n      type: \"keydown\",\n      listener: keydownListener,\n    });\n\n    fragment.appendChild(emotionCard);\n  });\n\n  emotionsContainer.appendChild(fragment);\n\n  console.log(\"Rendered\", emotionsData.length, \"emotion cards\");\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$2700091020122021$export$2a47f398eeff8b01","$2700091020122021$export$de863c629cb9919d","$ioPRj","$hSXbD","$4yiPC","$bsJMP","$2700091020122021$var$eventListeners","$2700091020122021$var$renderEmotionsSection","emotionsContainer","getContainer","DOMUtils","clearContainer","fragment","document","createDocumentFragment","emotionsData","forEach","item","emotionCard","createElement","className","attributes","title","name","description","tabindex","emotionIcon","text","emoji","emotionName","style","backgroundColor","color","emotionDescription","appendChild","clickListener","speakText","classList","add","setTimeout","remove","addEventListener","push","element","type","listener","keydownListener","keyEvent","key","preventDefault","console","log","length","removeEventListener"],"version":3,"file":"emotions.0941e5e8.js.map"}