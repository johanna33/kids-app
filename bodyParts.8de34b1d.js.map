{"mappings":"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","sources":["<anon>","src/scripts/sections/bodyParts.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"h6k7v\", function(module, exports) {\n\n$parcel$export(module.exports, \"initialize\", () => $340e180a8e17b744$export$2a47f398eeff8b01);\n$parcel$export(module.exports, \"cleanup\", () => $340e180a8e17b744$export$de863c629cb9919d);\n\nvar $ioPRj = parcelRequire(\"ioPRj\");\n\nvar $hSXbD = parcelRequire(\"hSXbD\");\n\nvar $4yiPC = parcelRequire(\"4yiPC\");\n\nvar $bsJMP = parcelRequire(\"bsJMP\");\n\nvar $klKV5 = parcelRequire(\"klKV5\");\n// Track event listeners for cleanup\nconst $340e180a8e17b744$var$eventListeners = [];\nfunction $340e180a8e17b744$export$2a47f398eeff8b01() {\n    $340e180a8e17b744$var$renderBodyPartsSection();\n}\nfunction $340e180a8e17b744$export$de863c629cb9919d() {\n    $340e180a8e17b744$var$eventListeners.forEach(({ element: element, type: type, listener: listener })=>{\n        element.removeEventListener(type, listener);\n    });\n    $340e180a8e17b744$var$eventListeners.length = 0;\n}\n/**\n * Render the body parts section\n */ function $340e180a8e17b744$var$renderBodyPartsSection() {\n    const bodyPartsContainer = (0, $hSXbD.getContainer)(\"bodyParts-container\");\n    if (!bodyPartsContainer) return;\n    // Clear the container efficiently\n    (0, $bsJMP.DOMUtils).clearContainer(bodyPartsContainer);\n    // Get image loader instance\n    const imageLoader = (0, $klKV5.ImageLoader).getInstance();\n    // Use document fragment for better performance\n    const fragment = document.createDocumentFragment();\n    // Create body part cards\n    (0, $ioPRj.bodyPartsData).forEach((item)=>{\n        const bodyPartCard = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"bodyPart-card\",\n            attributes: {\n                title: `${item.name}: ${item.description}`,\n                \"aria-label\": `${item.name}: ${item.description}`,\n                tabindex: \"0\"\n            }\n        });\n        // Use lazy loading for images if available\n        if (item.image) {\n            const bodyPartImage = imageLoader.createLazyImage(item.image, item.name, \"bodyPart-image\", item.color);\n            bodyPartCard.appendChild(bodyPartImage);\n        } else {\n            const bodyPartEmoji = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n                className: \"bodyPart-emoji\",\n                text: item.emoji\n            });\n            bodyPartCard.appendChild(bodyPartEmoji);\n        }\n        const bodyPartName = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"bodyPart-name\",\n            text: item.name\n        });\n        bodyPartName.style.backgroundColor = item.color;\n        const bodyPartDescription = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"bodyPart-description\",\n            text: item.description\n        });\n        const bodyPartFunction = (0, $bsJMP.DOMUtils).createElement(\"div\", {\n            className: \"bodyPart-function\",\n            text: item.function\n        });\n        bodyPartCard.appendChild(bodyPartName);\n        bodyPartCard.appendChild(bodyPartDescription);\n        bodyPartCard.appendChild(bodyPartFunction);\n        // Add event listener and track it for cleanup\n        const clickListener = ()=>{\n            (0, $4yiPC.speakText)(`${item.name}: ${item.description}. ${item.function}`);\n            bodyPartCard.classList.add(\"active\");\n            setTimeout(()=>bodyPartCard.classList.remove(\"active\"), 1000);\n        };\n        bodyPartCard.addEventListener(\"click\", clickListener);\n        $340e180a8e17b744$var$eventListeners.push({\n            element: bodyPartCard,\n            type: \"click\",\n            listener: clickListener\n        });\n        // Add keyboard support\n        const keydownListener = (e)=>{\n            const keyEvent = e;\n            if (keyEvent.key === \"Enter\" || keyEvent.key === \" \") {\n                e.preventDefault();\n                clickListener();\n            }\n        };\n        bodyPartCard.addEventListener(\"keydown\", keydownListener);\n        $340e180a8e17b744$var$eventListeners.push({\n            element: bodyPartCard,\n            type: \"keydown\",\n            listener: keydownListener\n        });\n        fragment.appendChild(bodyPartCard);\n    });\n    bodyPartsContainer.appendChild(fragment);\n    console.log(\"Rendered\", (0, $ioPRj.bodyPartsData).length, \"body part cards\");\n}\n\n});\n\n\n//# sourceMappingURL=bodyParts.8de34b1d.js.map\n","import { bodyPartsData } from \"../common/data-content\";\nimport { getContainer } from \"../core/dom-elements\";\nimport { speakText } from \"../common/utils\";\nimport { DOMUtils } from \"../core/dom-utils\";\nimport { ImageLoader } from \"../core/image-loader\";\n\n// Track event listeners for cleanup\nconst eventListeners: Array<{\n  element: HTMLElement;\n  type: string;\n  listener: EventListener;\n}> = [];\n\n/**\n * Initialize the body parts section\n */\nexport function initialize(): void {\n  renderBodyPartsSection();\n}\n\n/**\n * Clean up resources when section is hidden\n */\nexport function cleanup(): void {\n  eventListeners.forEach(({ element, type, listener }) => {\n    element.removeEventListener(type, listener);\n  });\n  eventListeners.length = 0;\n}\n\n/**\n * Render the body parts section\n */\nfunction renderBodyPartsSection(): void {\n  const bodyPartsContainer = getContainer(\"bodyParts-container\");\n\n  if (!bodyPartsContainer) {\n    return;\n  }\n\n  // Clear the container efficiently\n  DOMUtils.clearContainer(bodyPartsContainer);\n\n  // Get image loader instance\n  const imageLoader = ImageLoader.getInstance();\n\n  // Use document fragment for better performance\n  const fragment = document.createDocumentFragment();\n\n  // Create body part cards\n  bodyPartsData.forEach((item) => {\n    const bodyPartCard = DOMUtils.createElement(\"div\", {\n      className: \"bodyPart-card\",\n      attributes: {\n        title: `${item.name}: ${item.description}`,\n        \"aria-label\": `${item.name}: ${item.description}`,\n        tabindex: \"0\",\n      },\n    });\n\n    // Use lazy loading for images if available\n    if (item.image) {\n      const bodyPartImage = imageLoader.createLazyImage(\n        item.image,\n        item.name,\n        \"bodyPart-image\",\n        item.color,\n      );\n      bodyPartCard.appendChild(bodyPartImage);\n    } else {\n      const bodyPartEmoji = DOMUtils.createElement(\"div\", {\n        className: \"bodyPart-emoji\",\n        text: item.emoji,\n      });\n      bodyPartCard.appendChild(bodyPartEmoji);\n    }\n\n    const bodyPartName = DOMUtils.createElement(\"div\", {\n      className: \"bodyPart-name\",\n      text: item.name,\n    });\n    bodyPartName.style.backgroundColor = item.color;\n\n    const bodyPartDescription = DOMUtils.createElement(\"div\", {\n      className: \"bodyPart-description\",\n      text: item.description,\n    });\n\n    const bodyPartFunction = DOMUtils.createElement(\"div\", {\n      className: \"bodyPart-function\",\n      text: item.function,\n    });\n\n    bodyPartCard.appendChild(bodyPartName);\n    bodyPartCard.appendChild(bodyPartDescription);\n    bodyPartCard.appendChild(bodyPartFunction);\n\n    // Add event listener and track it for cleanup\n    const clickListener = () => {\n      speakText(`${item.name}: ${item.description}. ${item.function}`);\n      bodyPartCard.classList.add(\"active\");\n      setTimeout(() => bodyPartCard.classList.remove(\"active\"), 1000);\n    };\n\n    bodyPartCard.addEventListener(\"click\", clickListener);\n    eventListeners.push({\n      element: bodyPartCard,\n      type: \"click\",\n      listener: clickListener,\n    });\n\n    // Add keyboard support\n    const keydownListener = (e: Event) => {\n      const keyEvent = e as KeyboardEvent;\n      if (keyEvent.key === \"Enter\" || keyEvent.key === \" \") {\n        e.preventDefault();\n        clickListener();\n      }\n    };\n\n    bodyPartCard.addEventListener(\"keydown\", keydownListener);\n    eventListeners.push({\n      element: bodyPartCard,\n      type: \"keydown\",\n      listener: keydownListener,\n    });\n\n    fragment.appendChild(bodyPartCard);\n  });\n\n  bodyPartsContainer.appendChild(fragment);\n\n  console.log(\"Rendered\", bodyPartsData.length, \"body part cards\");\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$340e180a8e17b744$export$2a47f398eeff8b01","$340e180a8e17b744$export$de863c629cb9919d","$ioPRj","$hSXbD","$4yiPC","$bsJMP","$klKV5","$340e180a8e17b744$var$eventListeners","$340e180a8e17b744$var$renderBodyPartsSection","bodyPartsContainer","getContainer","DOMUtils","clearContainer","imageLoader","ImageLoader","getInstance","fragment","document","createDocumentFragment","bodyPartsData","forEach","item","bodyPartCard","createElement","className","attributes","title","name","description","tabindex","image","bodyPartImage","createLazyImage","color","appendChild","bodyPartEmoji","text","emoji","bodyPartName","style","backgroundColor","bodyPartDescription","bodyPartFunction","function","clickListener","speakText","classList","add","setTimeout","remove","addEventListener","push","element","type","listener","keydownListener","keyEvent","key","preventDefault","console","log","length","removeEventListener"],"version":3,"file":"bodyParts.8de34b1d.js.map"}